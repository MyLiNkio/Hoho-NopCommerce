@model AdminHeaderLinksModel
@if (Model.IsCustomerImpersonated || Model.DisplayAdminLink)
{
    <div class="admin-header-links">
        @if (Model.IsCustomerImpersonated)
        {
            <div class="impersonate">
                <span>@string.Format(T("Account.ImpersonatedAs").Text, Model.ImpersonatedCustomerName)</span>
                <a href="@Url.RouteUrl("Logout")" class="finish-impersonation" title="@T("Account.ImpersonatedAs.Finish.Hint")">@T("Account.ImpersonatedAs.Finish")</a>
            </div>
        }
        @if (Model.DisplayAdminLink)
        {
            <a href="@Url.Content("~/Admin")" class="administration">@T("Account.Administration")</a>
        }
        @if (!string.IsNullOrEmpty(Model.EditPageUrl))
        {
            <a href="@Model.EditPageUrl" class="manage-page">@T("Common.ManagePage")</a>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.AdminHeaderLinksAfter, additionalData = Model })
    </div>


    @* HOHOImprove *@
    <script asp-location="Footer">
        $(document).ready(function () {
            function updateWindowSize() {
                var windowWidth = $(window).width();
                var windowHeight = $(window).height();

                $('#window-width').text(windowWidth);
                $('#window-height').text(windowHeight);
            }

            // Инициализация при загрузке страницы
            updateWindowSize();

            // Обновление размеров при изменении размеров окна браузера
            $(window).resize(function () {
                updateWindowSize();
            });
        });
    </script>
}